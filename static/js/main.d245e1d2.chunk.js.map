{"version":3,"sources":["logo.svg","assets sync /^/.*/.jpg$","assets/Aquarius.jpg","assets/Aries.jpg","assets/Cancer.jpg","assets/Capricorn.jpg","assets/Gemini.jpg","assets/Leo.jpg","assets/Libra.jpg","assets/Pisces.jpg","assets/Sagittarius.jpg","assets/Scorpio.jpg","assets/Taurus.jpg","assets/Virgo.jpg","components/GamePiece.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","map","./Aquarius.jpg","./Aries.jpg","./Cancer.jpg","./Capricorn.jpg","./Gemini.jpg","./Leo.jpg","./Libra.jpg","./Pisces.jpg","./Sagittarius.jpg","./Scorpio.jpg","./Taurus.jpg","./Virgo.jpg","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","Object","resolve","GamePiece","props","name","react_default","a","createElement","className","onClick","event","clickHandler","src","require","concat","alt","Game","state","score","guessed","gameOver","zodiacSigns","gamePieceClickHandler","data","_this","includes","console","log","setState","_this2","this","shuffle","sign","components_GamePiece","key","length","renderPieces","renderMessageBox","Component","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d245e1d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var map = {\n\t\"./Aquarius.jpg\": 30,\n\t\"./Aries.jpg\": 31,\n\t\"./Cancer.jpg\": 32,\n\t\"./Capricorn.jpg\": 33,\n\t\"./Gemini.jpg\": 34,\n\t\"./Leo.jpg\": 35,\n\t\"./Libra.jpg\": 36,\n\t\"./Pisces.jpg\": 37,\n\t\"./Sagittarius.jpg\": 38,\n\t\"./Scorpio.jpg\": 39,\n\t\"./Taurus.jpg\": 40,\n\t\"./Virgo.jpg\": 41\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 29;","module.exports = __webpack_public_path__ + \"static/media/Aquarius.76757849.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Aries.b4ed37b0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Cancer.d01e8e54.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Capricorn.7ed63b19.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Gemini.2e334faa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Leo.b4dd4d15.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Libra.c02dbc43.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Pisces.dd29d0bc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Sagittarius.c6cd272a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Scorpio.ed13490e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Taurus.9b603c9a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Virgo.44fe118e.jpg\";","import React from \"react\";\n\nfunction GamePiece(props) {\n    const name = props.name;\n    return (\n        <div className=\"col-3\" onClick={event => props.clickHandler(event, {name: name})}>\n            <img className=\"gamePieceImg\" src={require(`../assets/${name}.jpg`)} alt={name} />\n        </div>\n    );\n}\n\nexport default GamePiece;\n","import React, { Component } from \"react\";\nimport GamePiece from \"./GamePiece\";\nimport shuffle from \"lodash/shuffle\";\n\nclass Game extends Component {\n    state = {\n        score: 0,\n        guessed: [],\n        gameOver: false\n    };\n\n    zodiacSigns = [\n        \"Aries\",\n        \"Taurus\",\n        \"Gemini\",\n        \"Cancer\",\n        \"Leo\",\n        \"Virgo\",\n        \"Libra\",\n        \"Scorpio\",\n        \"Sagittarius\",\n        \"Capricorn\",\n        \"Aquarius\",\n        \"Pisces\"\n    ]\n\n    // Controller for handling clicks on GamePieces\n    gamePieceClickHandler = (event, data) => {\n        // const {target} = event;\n        const {name} = data;\n\n        // Check if Piece has already been clicked\n        if (this.state.guessed.includes(name)) {\n            // If duplicate, loss state\n            console.log(\"GUESSED\");\n\n            // Reset Score and Guessed list, set gameOver to true\n            this.setState({\n                score: 0,\n                guessed: [],\n                gameOver: true\n            });\n            \n        } else {\n            // If not duplicate, increase score and add clicked icon to guessed list\n            console.log(\"NOT GUESSED\")\n\n            // Increase score and add clicked GamePiece to guessed list\n            this.setState({\n                score: this.state.score+1,\n                guessed: this.state.guessed.concat(name),\n                gameOver: false\n            });\n        }\n    }\n\n    // Creates a randomized array of GamePieces by shuffling the array of possible values\n    renderPieces() {\n        this.zodiacSigns = shuffle(this.zodiacSigns);\n        console.log(this.zodiacSigns);\n\n        return this.zodiacSigns.map( sign => <GamePiece key={sign} name={sign} clickHandler={this.gamePieceClickHandler} />)\n    }\n\n    // Controls the appearane of the Win/Loss message box\n    renderMessageBox() {\n        // If score is equals the number of guessable items, display victory message\n        if (this.state.score === this.zodiacSigns.length) {\n            return  <h1>You got them all!</h1>\n        } else if (this.state.gameOver === true) {\n            return <h1>You already guessed that! Try again!</h1>\n        }\n        // Return nothing if no conditions met\n        return;\n    }\n  \n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"scoreZone\">\n                    <h1>Score: {this.state.score}</h1>\n                </div>\n                \n                <div className=\"row gameBoard m-auto\">\n                    {this.renderPieces()}\n                </div>\n\n                {this.renderMessageBox()}\n            </div>            \n        );\n    }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './components/Game'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}